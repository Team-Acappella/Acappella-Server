이 부분의 코드인데 이거는 모든 트레이드가 이거를 하나 생성해서 트레이드 1이 나오고 이걸 생성해서 트레이드 2가 나오고 이러니까 코드는 셰어하는 게 맞고요.
그 안에 이제 중간에 이제 메모리 상에 있는 그런 데이터도 우리가 공유하고 파일도 공유한다는 겁니다.
그래서 이게 공유가 돼서 스레드가 ipc 안 하고도 서로 정보를 알 수 있으니까 장점이고요.
다만 레지스터나 스트랙은 각각 별도로 가지고 있다 이겁니다.
스택이 뭐 하는지 여러분 기억하세요. 좀 체크 한번 해보시고요.
커널트레드와 유저 트레드 커널트레드와 유저 트레드 1, 2, 1 모델 인 모스트 케이시스의 보통은 이것도 사실 여러분 공룡 책에 많이 나온 거 다 책에는 그렇게 중요하게 안 하는데 보통 유저 트레드가 있으면 커널트레드가 대응한다는 얘기입니다.
이게 보통 12, 1이에요. 이건 모스트 케이스가 이것만 아셔도 돼요.
사실 윈도우나 리눅스 솔라리스 유닉스입니다. 유닉스에서 다 이렇게 한다는 건데 만약에 우리가 너

우리가 유저 레벨에서 예를 들면 어떤 아까 말한 캘큐레이드 하는 함수를 가지고 스트레이드를 하나 만들었어요.
그럼 이거를 얘가 막 뭘 할 때 이거에 대해서 대응해서 처리해 주는 게 커널 트레이드가 하나 나와서 실제로 얘가 무슨 뭐 함수를 부르고 널 시스템 코를 부르고 할 때마다 커널 드레드가 이걸 대응해 주면 되는데 그러다 보니까 각각의 처리할 때 커널에서도 대응하는 트레드가 생겨서 1대 1로 대응을 해 준다는 얘기입니다.
그래서 이츠 유저 레벨 트레드는 맵스트 커널 트레드 크레이팅 유저 레벨 트레드는 크레이터 커널 트레드 그러니까 유저 레벨 트레드가 하나 생길 때마다 커널 레벨 트레이드도 같이 만들어준다는 얘기입니다.
그리고 모 컨커런트 댄 매니2 1 매니트 1보다는 컨커런트하다 안전하다 이거죠 컨커런스 야드 여기서 지금 저거죠 아까도 컨커런트하다에서 참 표현을

그렇게 해도 영어적으로 보면 어쨌든 그리고 넘버 러브 트라이드는 프로세스 썸타임스 리스트렉티드 오버헤드 그러니까 이런 게 오버헤드가 또 있을 수도 있기 때문에 여러분들이 그런 것도 또 좀 알아두시면 되죠.
아이고 새벽에 여러분 되니까 제가

그

목소리가 조금 잠긴 게 있습니다. 좀

네

조금 이해를 해 주시기 바랍니다. 그리고 매니트1 이거는 이제 개념적인 겁니다.
이게 늘 말하지만 os 이거 하시는 분들은요 조금 철학적인 면이 있어요.
우리 미디어 하는 거는 좀 현실적으로 연구하고 현실적으로 우리가 알고리즘을 직접 다룬다면 os는 약간 시스템 레벨의 디자인을 하기 때문에 철학적인 면이 있는데 그런 면에서 이 친구들이 이제 이걸 쓴 겁니다.
맨이 유저 레벨 트레드가 싱글 커널에다가 이렇게 대응하게 유저 레벨 트레드 여러 개가 생겨도 하나가 얘를 다 대응해서 얘가 요구해도 처리해 주고 얘가 요구해도 처리해주고 이렇게 할 수도 있죠.
근데 이제 그러면은 원 트레드가 블로킹 되면은 코스 2 o2 블록이 되는 그런 문제가 있습니다.
그래서 이게 별로 그렇게 좋지 않아요. 그리고 여기도 또 있지만 메이나 런 인패러럴 멀티코어 시스템 비코스 온리 원 메이비 커널 에토 타임 얘 커널 스트레이드가 하나가 이거를 다 대응을 한다라고 하면 유저 레벨 트레드가 여러 개가 생겨가지고

예를 들어 유저 레벨 트레드가 여러 개가 생겨서 각각의 우리가 멀티코어에서 이렇게 돌 때 얘 하나가 대응하고 있으면 실제로 이게 멀티코어 효과를 못 보는 거죠.
얘가 하나의 코어에서 도니까 얘는 한 번에 하나의 일을 해주잖아요.
그렇죠? 그러니까 마치 그거랑 똑같습니다. 이렇게 4명이 창구에 은행 창구에 앉아 있어요.
그래서 사람들이 4명이 가서 이렇게 섰어요. 그래서 이제 해주세요.
하면 우리가 동시에 4명이 될 것 같잖아요. 근데 얘가 만약 얘가 신분증을 내고 뭘 할 때 은행 돈을 할 때 갑자기 뒤에 있는 사람한테 부탁을 하는 건데 이 뒤에 한 명이 있어요.
한 명이 얘 거도 받아서 처리하고 얘 거도 받아서 처리하고 얘 거도 받아서 처리하고 얘 거도 받아서 처리해요.
얘가 뭐 신분증도 확인하고 돈도 빼주고 넣어주고 얘네들이 그냥 인터페이스 역할만 하고 그런 경우는 어차피 말짱 얘가 하나 다 하니까

일이 조금 분담될지 모르지만 어쨌든 느리죠. 그러니까 절대로 멀티플 타임이 4배 이게 안 나오죠.
그래서 피어 시스템들이 커렌트리 사용하고 있고요.
별로 좋지 않습니다. 그리고 매니 투 매니 모델은 뭐 이렇게 한다고 그러는데 얼마나 이게 복잡하겠어요 관리가 서로 이렇게 해도 되고 이렇게 해도 되고 커널트레드가 여럿 이렇게 막 떠 있고 유저 레벨에 이렇게 있고 얘가 얘를 하다가 얘가 얘를 하다가 그건 뭐냐 하면 창구에 이렇게 갔어요.
가서 이제 4명의 사람들이 가서 이 창구에 은행 창구에서 대응을 하는데 이 백엔드에서 이렇게 있고 얘가 지금 막 돌고 있으면 얘가 얘한테 맡기고 얘는 또 얘한테 맡기고 또 이렇게 서로 엇갈려가면서 막 맡길 수 있다는 이런 식의 개념이 된다라고 하면 이 관리가 다시 매니 2 매니로 하는 거에서 어려워지죠.
그래서 어떻게 보자면 복잡합니다. 뭐 그렇게 쓰는 게 있다고는 하는데 프라이트 버전 라인 전에는 솔라리스가 이렇게 썼대요.

솔라리스가 텐이 나온 지가 제가 대학원생 때 텐이 나왔을걸요 그러니까 이건 뭐 이거는 역사 속에서 사라진 거죠.
네 그래서 별로 역시 크게 고민하지 않으셔도 되겠습니다.
2 레벨 모델 뭐 이렇게도 하고 이렇게도 한다.

네

아주 솔라리스 8번 또는 그 이전 버전 생각에서 솔라리스 나인에 그거 썼다고 했는데 텐이 나온 지가 벌써 언젠데

예 예

굵은 걸로 해가지고 이렇게 막 우리 아들 이런 거 좋아하는데 이렇게 이렇게 막 낙서하고 이런 거 그런 거 생각하시면 됩니다.
새벽 6시가 되니까 아이고 7시네 이제 막 이렇게 하고 싶다.
스트레스 풀고 싶은데 오늘 다른 교수님들과 점심이 있기 때문에 아침에 나가야 되네요.
애도 어린이집 데려다 줘야 되나? 네 드라이드 라이브러리 트라이드 라이브러리 이제 얘기 나오는데 라이브러리는 프로바이저스 프로그램 위드 api 크레이링 엔 매니징 스트레드 스트레이드를 만드는데 아까 전에 제가 얘기했잖아요.
크리에이트 트레드 이런 함수들 제가 사실 여러분들 멀티 트레이딩 프로그램에 대해서도 슬라이드를 준비해 놨습니다.
그래서 이제 그거를 우리 조교들을 통해서 학생들 통해서 좀 준비를 해놨는데 공유하겠지만 이런 함수들을 쓰고 트레드에 대해서 어떤 식으로 처리하고 하는 것들에 대해서 또 라이브러리가 존재합니다.
그래서

또 이제 트레이드가 커널 트레이드가 있죠 커널 레벨 트레이드가 있고요.
이건 소프트 바이드 os에 의해서 하고 또 우리가 유저 레벨에서 라이브러리가 유저 스페이스에 있는 경우도 있습니다.
그래서 여러분 유저 레벨 유저 레벨 트레이드가 있고요.
커널 레벨 트레이드가 있습니다. 이건 커널은 이제 커널에서 알아서 도는 거고요.
보통 여러분들이 어떤 시스템 콜을 통해서 시스템 콜을 통해서 어떤 뭔가를 요청을 하면 커널 레벨에서 트레이드가 알아서 돌면서 이거에 대해서 처리하고 대응을 해주죠.
여러분들은 여러분들 입장에서는 유저 레벨 뚜레드만 만들면 됩니다.
그럼 교수님 저 이거 만드는 건 못 하나요? 이 커널 레벨 트레드는 여러분이 시스템 소프트웨어 시간이 있으면 우리 학교는 안타깝게도 시스템 소프트웨어가 우리 과에는 없는데 과목이 많으면 이런 것도 있으면 좋죠 사실 그래서 원래 os랑 1학기에 듣고 그다음 학기에 시스템 소프트웨어 ss라고 합니다.
이렇게 두 개 들으면 이쪽으로 좋은 건데

우리가 과목이 교육학도 듣고 여러 가지가 있기 때문에 또 제한적이고 옛날보다 여러분들 사실 수업 수가 좀 줄은 것 같아요.
저는 제가 느끼기에는 등록금도 고정이고 하니까 과목 선택도 적고요.
사실 과목이 여러 개가 열려서 여러분이 이것 좀 듣고 요것 좀 듣고 뭐 이렇게 이렇게 듣고 이렇게도 듣고 그래서 여기는 10명이 들어도 개설이 되고 이렇게 하면 좋은데 지금 사실 여러분들이 학생 숫자에 맞춰서 과목이 최소한으로 개설이 돼야 사실 학교가 돈을 세이빙 하잖아요.
그래서 그렇게 많이 개설이 안 됩니다. 그게 아쉽죠.
등록금을 10몇 년째 못 올리도록 교육부가 잡고 있는데 그런 영향이 있어요.
제가 한번 옛날에도 얘기한 적 있는데 학교가 돈 많이 받는데 왜 그래요라고 학생들이 좀 억울해할 수 있는 거 알고 있습니다.
근데 사실 캠퍼스같이 그 넓은 땅에다가 래미안 아파트를 짓고 만약에 자기 아파트를 지으면 돈을 떼돈을 벌잖아요.
근데 그렇게 안 하고

늘 말하지만 캠퍼스같이 그 넓은 땅에다가 분수 틀고 도서관에다가 맨날 책 사다가 놓고 청소하고 건물 짓고 그거 다 하고서는 실제로 받는 건 요새 영어 유치원보다도 싸잖아요.
그래서 영어 유치원들이 150만 원 200만 원 내는데 한 달에 그런 거에 비하면 되게 쌉니다.
사실 해외 대학보다도 많이 싸고요. 그런데도 우리가 세계 국제 경쟁력은 이제는 100등 안에 드는 것은 당연하게 여기고 50등 안에 드느냐 이런 걸 노리잖아요.
해외에서 몇천만 원 받는 대학들에 비해서 경쟁력을 갖기가 어렵죠.
그래서 아마 학교가 여러 가지 재단이나 이런 데서 들어오는 돈이 없으면 등록금으로 운영이 어렵습니다.
그래서 교수들도 연봉 자체는 기업이 봤던 것보다 훨씬 작습니다.
제가 처음에 학교 올 때 깜짝 놀랐었어요. 제가 봤던 연봉의 3분의 1을 살짝 넘었어요.

네

원래 작은 건 알고 있었는데 명예직이라고 생각했지만 그리고 자기가 하고 싶은 연구를 마음대로 해야죠.
저 옛날에 밀리미터 웨이브 통신으로 영상 처리하고 전송하고 하는 거를 하고 싶었는데 삼성에 있을 때도 허용이 잘 안 됐어요.
위에서 그래서 아이고 맨날 제가 파트장이면서 부장급이었고 나름대로 최연소고 했는데도 다 위에서 이제 차 절차를 밟아서 허락이 떨어지고 떨어져야지 하니까 항상 이 프로세스가 오래 걸렸죠.
학교에 오면요 제가 관심 있으면 내일이라도 학생들 소집해서 요구하자라고 하면 하는 겁니다.
그래서 실제로 학교 와서 했습니다. 논문도 내고 네 여러분

어

그리고 제가 아까 전에 좀 말씀드린 부분을 좀 확인을 해봤습니다.
잠깐 포즈하고 확인을 해봤고요. 우리 다시 얘기하자면

제가 아까 여기서 그렇죠 여기서 셰어드 메모리의 이 메모리 공간이 그림상으로 유저 레벨로 나오는데 정말인가 했는데 맞습니다.
유저 레벨 맞고요. 커널은 당연히 아까 말했듯이 api를 통해서 시스템 콜을 통해서 시스템 콜을 통해서 야 나 수어드 메모리 좀 하나 허용해줘.
그럼 허락을 해주는 거죠. 알려주고 거기를 잡아는 주는데 이 위치는 유저 레벨에 잡히고요.
그러면 이제 두 개가 억세스를 합니다. 이 문제가 왜 그러냐면은 허용이 필요합니다.
아시다시피 우리 프로세스가 남의 메모리를 함부로 우리가 들어가서 이걸 못 하잖아요.
그러니까 커널이 특정한 공간을 주고 이거에 대해서는 충돌 없이 쓸 수 있는 그런 식의 개념이고요.
그래서 아까 뒤에 나왔지만은 시스템 콜을 여기 우리가 나왔죠 시스템 콜을 공유 메모리 상에서 유저 랩을 시스템 콜을 한 번 해줘야 된다.
그게 있습니다. 그리고

그러니까 당연히 여기 유저 레벨에 있고 커널의 중계를 거치지 않으니까 이거에 비해서 속도가 빠르죠 속도가 속도가 좀 빠르다.
속도가.

네

그런 장점이 있고요. 이런 거 비슷한 얘기로 여러분 메모리 맵드 파이라고 들었는지 모르겠습니다.
메모리 맵드 파일 메모리 맵 드 파일 이런 게 있는데 이거 사실 여러분이 사실 만약에 그냥 파일 같은 걸 하나 열어가지고 프로세스 a가 여기다 데이터를 넣다가 얘도 넣고 쓰고 파일에서 서로 공유해가지고 읽고 쓰고 리드 모드로 라이트 모드로 이걸 한다라고 치면 사실 이거랑 똑같은 개념이잖아요 여러분 파일하고 메모리에다가 데이터 쓰는 거하고 같은 개념입니다.
그러니까 개념적으로 이제 물리상의 위치가 스토리지에 있고 이거 차이지 그렇습니다.
그래서 그런 비슷한 쉐어드 메모리랑 비슷한 기술입니다.
이렇게 구현을 해서 쓸 수가 있습니다. 그래서 오늘은

어

이거 여기까지 오늘은 하고 다음 시간에 제가 조금 여기다 더 표시를 해놨었는데 트라이드 구현 사례라든지 이런 내용을 좀 설명을 하도록 하겠습니다.
그럼 좋은 추석 보내시기 바랍니다.